# Test generated by RoostGPT for test python-unit--test using AI Type Open AI and AI Model gpt-4

import unittest
from flask import Flask, jsonify, abort
from unittest.mock import patch, MagicMock

# Assuming the original function is in a file named app.py
from app import get_day

class TestGetDay(unittest.TestCase):

    @patch('app.jsonify', return_value="Mocked!")
    @patch('app.abort')
    def test_get_day_valid_id(self, mock_abort, mock_jsonify):
        days = [
            {"id": 1, "name": "Monday"},
            {"id": 2, "name": "Tuesday"}
        ]
        with patch('app.days', new=days):
            result = get_day(1)
            self.assertEqual(result, "Mocked!")
            mock_jsonify.assert_called_once_with({"day": days[0]})
            mock_abort.assert_not_called()

    @patch('app.jsonify', return_value="Mocked!")
    @patch('app.abort', side_effect=Exception("404 Not Found"))
    def test_get_day_invalid_id(self, mock_abort, mock_jsonify):
        days = [
            {"id": 1, "name": "Monday"},
            {"id": 2, "name": "Tuesday"}
        ]
        with patch('app.days', new=days):
            with self.assertRaises(Exception) as context:
                get_day(3)
            self.assertTrue("404 Not Found" in str(context.exception))
            mock_abort.assert_called_once_with(404)
            mock_jsonify.assert_not_called()

if __name__ == '__main__':
    unittest.main()
